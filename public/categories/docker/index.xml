<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on Fatkun&#39;s Blog</title>
    <link>http://fatkun.github.io/categories/docker/</link>
    <description>Recent content in docker on Fatkun&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 26 Oct 2019 10:41:26 +0000</lastBuildDate>
    
	<atom:link href="http://fatkun.github.io/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>从CustomResourceDefinition生成k8s java模型代码</title>
      <link>http://fatkun.github.io/2019/10/generate-java-codes-from-customresourcedefinition.html</link>
      <pubDate>Sat, 26 Oct 2019 10:41:26 +0000</pubDate>
      
      <guid>http://fatkun.github.io/2019/10/generate-java-codes-from-customresourcedefinition.html</guid>
      <description>目标 已经有了go版本的模型定义，需要生成java版本 看了下官方介绍的文档 generate-model-from-third-party-resources.md 感觉不会太难，照着尝试一下。 开始干活 首先看到要k8s 1.15以上的</description>
    </item>
    
    <item>
      <title>使用java kubenetes client replaceClusterCustomObject报错Bad Request</title>
      <link>http://fatkun.github.io/2019/09/java-kubenetes-client-replaceclustercustomobject-throw-bad-request.html</link>
      <pubDate>Wed, 18 Sep 2019 02:18:15 +0000</pubDate>
      
      <guid>http://fatkun.github.io/2019/09/java-kubenetes-client-replaceclustercustomobject-throw-bad-request.html</guid>
      <description>报错 报错Bad Request只是显式的错误，在ApiException里面有个resp返回的内容，在里面可以看到实际的错误，报错如下 coul</description>
    </item>
    
    <item>
      <title>K8s Endpoint无IP定位错误方法</title>
      <link>http://fatkun.github.io/2019/08/k8s-endpoint-not-contain-ip.html</link>
      <pubDate>Mon, 26 Aug 2019 02:57:21 +0000</pubDate>
      
      <guid>http://fatkun.github.io/2019/08/k8s-endpoint-not-contain-ip.html</guid>
      <description>确认selector是否正确 确认pod里面配置的containerPort以及service里面的配置的port能对应上 确认pod是否rea</description>
    </item>
    
    <item>
      <title>minikube生成内置证书的kubeconfig</title>
      <link>http://fatkun.github.io/2019/08/minikube-embed-certs.html</link>
      <pubDate>Mon, 12 Aug 2019 06:20:20 +0000</pubDate>
      
      <guid>http://fatkun.github.io/2019/08/minikube-embed-certs.html</guid>
      <description>minikube默认生成的证书都是文件路径，如果要在其他地方使用不方便，需要把证书内置。 如果还没启动minikube，可以看下 https://github.com/kubernetes/minikube/issues/3064 如果已经生成</description>
    </item>
    
    <item>
      <title>knative serving 0.6 版本变更</title>
      <link>http://fatkun.github.io/2019/05/knative-serving-0-6-change.html</link>
      <pubDate>Sun, 19 May 2019 13:47:33 +0000</pubDate>
      
      <guid>http://fatkun.github.io/2019/05/knative-serving-0-6-change.html</guid>
      <description>翻译了一下0.6的版本变更 概要 新API模型 我们已经通过了knative serving “v1beta1” API模型提议，这些改变会使得kubernetes</description>
    </item>
    
    <item>
      <title>minikube在宿主机请求集群IP</title>
      <link>http://fatkun.github.io/2019/02/minikube%E5%9C%A8%E5%AE%BF%E4%B8%BB%E6%9C%BA%E8%AF%B7%E6%B1%82%E9%9B%86%E7%BE%A4ip.html</link>
      <pubDate>Mon, 18 Feb 2019 03:34:47 +0000</pubDate>
      
      <guid>http://fatkun.github.io/2019/02/minikube%E5%9C%A8%E5%AE%BF%E4%B8%BB%E6%9C%BA%E8%AF%B7%E6%B1%82%E9%9B%86%E7%BE%A4ip.html</guid>
      <description>添加路由进行请求 sudo ip route add 172.17.0.0/16 via $(minikube ip) 来源 https://stackoverflow.com/questions/42268814/routing-an-internal-kubernetes-ip-address-to-the-host-system</description>
    </item>
    
    <item>
      <title>【记录】为Kubernetes集群添加用户</title>
      <link>http://fatkun.github.io/2019/02/kubernetes-add-user.html</link>
      <pubDate>Sun, 17 Feb 2019 09:47:39 +0000</pubDate>
      
      <guid>http://fatkun.github.io/2019/02/kubernetes-add-user.html</guid>
      <description>具体按照这篇文章配置 https://zhuanlan.zhihu.com/p/43237959 ，本文用于记录命令 minikube的证书在/var/lib/minikube/certs 目录下，或者/var/lib/</description>
    </item>
    
    <item>
      <title>查看k8s中某台机器gpu分配</title>
      <link>http://fatkun.github.io/2018/12/%E6%9F%A5%E7%9C%8Bk8s%E4%B8%AD%E6%9F%90%E5%8F%B0%E6%9C%BA%E5%99%A8gpu%E5%88%86%E9%85%8D.html</link>
      <pubDate>Thu, 20 Dec 2018 01:57:13 +0000</pubDate>
      
      <guid>http://fatkun.github.io/2018/12/%E6%9F%A5%E7%9C%8Bk8s%E4%B8%AD%E6%9F%90%E5%8F%B0%E6%9C%BA%E5%99%A8gpu%E5%88%86%E9%85%8D.html</guid>
      <description>分配的任务会记录在这个文件 /var/lib/kubelet/device-plugins/kubelet_internal_checkpoint 里面有个POD_UID，可以在日志里面找，找到对应的pod名称</description>
    </item>
    
    <item>
      <title>Failed to initialize NVML: Unknown Error</title>
      <link>http://fatkun.github.io/2018/11/failed-to-initialize-nvml-unknown-error.html</link>
      <pubDate>Wed, 14 Nov 2018 13:11:20 +0000</pubDate>
      
      <guid>http://fatkun.github.io/2018/11/failed-to-initialize-nvml-unknown-error.html</guid>
      <description>在k8s启动的pod内执行nvidia-smi，报错Failed to initialize NVML: Unknown Error，但直接用docker run –rm nvidia/cuda:9.0-base nvidia-smi 却不会报错。 找到这里的文</description>
    </item>
    
    <item>
      <title>k8s 拉取私有仓库失败</title>
      <link>http://fatkun.github.io/2018/09/k8s-errimagepull.html</link>
      <pubDate>Thu, 27 Sep 2018 08:59:02 +0000</pubDate>
      
      <guid>http://fatkun.github.io/2018/09/k8s-errimagepull.html</guid>
      <description>k8s 报错拉取镜像失败 Error response from daemon: pull access denied for istio/citadel, repository does not exist or may require ‘docker login’ docker login后，把配置拷贝到以下目录的其中一个。如果是${HOM</description>
    </item>
    
    <item>
      <title>knative分析 – controller</title>
      <link>http://fatkun.github.io/2018/08/knative-controller.html</link>
      <pubDate>Mon, 06 Aug 2018 12:06:37 +0000</pubDate>
      
      <guid>http://fatkun.github.io/2018/08/knative-controller.html</guid>
      <description>由于service名称重复，这里会用knative service 和 k8s service区分两者。 总体流程 用户创建knative service后，会创建出ro</description>
    </item>
    
    <item>
      <title>knative分析 – activator</title>
      <link>http://fatkun.github.io/2018/08/knative-activator.html</link>
      <pubDate>Mon, 06 Aug 2018 12:04:51 +0000</pubDate>
      
      <guid>http://fatkun.github.io/2018/08/knative-activator.html</guid>
      <description>当scale到0时，是怎样唤醒业务容器的？ activator就是负责做这个事情的组件。activator做两件事情，一个是负责把pod启动起</description>
    </item>
    
    <item>
      <title>knative分析 – autoscaler</title>
      <link>http://fatkun.github.io/2018/08/knative-autoscaler.html</link>
      <pubDate>Mon, 06 Aug 2018 12:00:42 +0000</pubDate>
      
      <guid>http://fatkun.github.io/2018/08/knative-autoscaler.html</guid>
      <description>文档说目前的实现只是为了快速实现，后期还会修改。 knative是如何做伸缩容的？ 处理伸缩容问题，首先要解决的问题是根据什么指标判断伸缩容？c</description>
    </item>
    
    <item>
      <title>在容器外访问k8s apiserver</title>
      <link>http://fatkun.github.io/2018/07/%E5%9C%A8%E5%AE%B9%E5%99%A8%E5%A4%96%E8%AE%BF%E9%97%AEk8s-apiserver.html</link>
      <pubDate>Fri, 20 Jul 2018 01:59:16 +0000</pubDate>
      
      <guid>http://fatkun.github.io/2018/07/%E5%9C%A8%E5%AE%B9%E5%99%A8%E5%A4%96%E8%AE%BF%E9%97%AEk8s-apiserver.html</guid>
      <description>使用 kubectl proxy &amp;ndash;port=8080 &amp;amp; 或者使用token $ APISERVER=$(kubectl config view --minify | grep server | cut -f 2- -d &#34;:&#34; | tr -d &#34; &#34;) $ TOKEN=$(kubectl describe secret $(kubectl get secrets | grep ^default | cut -f1 -d &#39; &#39;) | grep -E &#39;^token&#39; | cut -f2 -d&#39;:&#39; | tr -d &#34; &#34;) $ curl $APISERVER/api --header &#34;Authorization: Bearer $TOKEN&#34;</description>
    </item>
    
    <item>
      <title>k8s安装zookeeper</title>
      <link>http://fatkun.github.io/2018/04/k8s-install-zookeeper.html</link>
      <pubDate>Mon, 30 Apr 2018 09:53:32 +0000</pubDate>
      
      <guid>http://fatkun.github.io/2018/04/k8s-install-zookeeper.html</guid>
      <description>使用命令安装，里面使用了gcr的镜像换一下 kubectl create -f \ https://raw.githubusercontent.com/kubernetes/contrib/master/statefulsets/zookeeper/zookeeper.yaml 但装完之后，使用zkCli.sh 无法连接，检查配置，发现server配置的hostnam</description>
    </item>
    
    <item>
      <title>docker pull 访问registry过程</title>
      <link>http://fatkun.github.io/2018/01/docker-pull.html</link>
      <pubDate>Sun, 28 Jan 2018 03:01:28 +0000</pubDate>
      
      <guid>http://fatkun.github.io/2018/01/docker-pull.html</guid>
      <description>执行 docker pull daocloud.io/busybox 之后 步骤 请求 返回 1 GET https://daocloud.io/v2/ HTTP/1.1 HTTP/1.1 401 Unauthorized Server: nginx/1.11.13 Date: Sun, 28 Jan 2018 02:35:17 GMT Content-Type: application/json; charset=utf-8 Content-Length: 87 Connection: close Docker-Distribution-Api-Version: registry/2.0 Www-Authenticate: Bearer realm=&amp;#8221;https://daohub-auth.daocloud.io/auth&amp;#8221;,service=&amp;#8221;daocloud.io&amp;#8221; X-Content-Type-Options: nosniff{&amp;#8220;errors&amp;#8221;:[{&amp;#8220;code&amp;#8221;:&amp;#8221;UNAUTHORIZED&amp;#8221;,&amp;#8221;message&amp;#8221;:&amp;#8221;authentication required&amp;#8221;,&amp;#8221;detail&amp;#8221;:null}]} 2 GET https://daohub-auth.daocloud.io/auth?scope=repository%3Abusybox%3Apull&amp;service=daocloud.io HTTP/1.1 HTTP/1.1 200 OK Server: nginx/1.11.6 Date: Sun, 28 Jan 2018 02:35:17 GMT Content-Type: application/json Content-Length: 570 Connection: close X-Qequest-Time: 0.0</description>
    </item>
    
  </channel>
</rss>