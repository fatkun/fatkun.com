<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java基础 on Fatkun&#39;s Blog</title>
    <link>https://fatkun.github.io/tags/java%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in java基础 on Fatkun&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 21 Dec 2010 05:09:50 +0000</lastBuildDate>
    
	<atom:link href="https://fatkun.github.io/tags/java%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>List中的remove使用注意</title>
      <link>https://fatkun.github.io/2010/12/list-remove.html</link>
      <pubDate>Tue, 21 Dec 2010 05:09:50 +0000</pubDate>
      
      <guid>https://fatkun.github.io/2010/12/list-remove.html</guid>
      <description>先来看API是怎样写的。 boolean remove(Object o) 从此列表中移除第一次出现的指定元素（如果存在）（可选操作）。如果列表不包含元素，则不更改列表。更确切地讲，移除</description>
    </item>
    
    <item>
      <title>JAVA的==与Equals</title>
      <link>https://fatkun.github.io/2010/11/java-equals.html</link>
      <pubDate>Sun, 21 Nov 2010 03:38:21 +0000</pubDate>
      
      <guid>https://fatkun.github.io/2010/11/java-equals.html</guid>
      <description>以下是我的理解，可能有误 Java中的“==”用来判断是否是同一个对象（对象的引用是不是一样），equals方法一般会被覆盖，主要是比较值，而</description>
    </item>
    
    <item>
      <title>Comparator和Comparable的区别使用</title>
      <link>https://fatkun.github.io/2010/11/comparator-and-comparable.html</link>
      <pubDate>Sat, 06 Nov 2010 15:47:58 +0000</pubDate>
      
      <guid>https://fatkun.github.io/2010/11/comparator-and-comparable.html</guid>
      <description>Camparable与Comparator的区别 简单说： 实现Camparable接口可以直接使用sort方法Collections.sort</description>
    </item>
    
    <item>
      <title>Java的访问控制</title>
      <link>https://fatkun.github.io/2010/07/java-access.html</link>
      <pubDate>Fri, 30 Jul 2010 09:00:55 +0000</pubDate>
      
      <guid>https://fatkun.github.io/2010/07/java-access.html</guid>
      <description>&lt;h2 id=&#34;包package&#34;&gt;包（Package）&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;创建自己的包时，要求 package语句必须是文件中的第一个“非注释”代码。&lt;/li&gt;
&lt;li&gt;如果类名冲突时，可这样写java.util.Vector v = new java.util.Vector();&lt;/li&gt;
&lt;li&gt;可能（但并常见）有一个编译单元根本没有任何公共类。此时，可按自己的意愿任意指定文件名。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;访问控制&#34;&gt;访问控制&lt;/h2&gt;
&lt;table border=&#34;0&#34; cellspacing=&#34;0&#34; cellpadding=&#34;0&#34; width=&#34;584&#34;&gt;  &lt;tr&gt;    &lt;td width=&#34;105&#34;&gt;      &lt;p align=&#34;center&#34;&gt;        &lt;strong&gt;修饰符&lt;/strong&gt;      &lt;/p&gt;    &lt;/td&gt;
    &lt;td width=&#34;139&#34;&gt;      &lt;p align=&#34;center&#34;&gt;        &lt;strong&gt;类内部&lt;/strong&gt;      &lt;/p&gt;    &lt;/td&gt;
    &lt;td width=&#34;87&#34;&gt;      &lt;p align=&#34;center&#34;&gt;        &lt;strong&gt;同一个包&lt;/strong&gt;      &lt;/p&gt;    &lt;/td&gt;
    &lt;td width=&#34;104&#34;&gt;      &lt;p align=&#34;center&#34;&gt;        &lt;strong&gt;子类&lt;/strong&gt;      &lt;/p&gt;    &lt;/td&gt;
    &lt;td width=&#34;149&#34;&gt;      &lt;p align=&#34;center&#34;&gt;        &lt;strong&gt;任何地方&lt;/strong&gt;      &lt;/p&gt;    &lt;/td&gt;  &lt;/tr&gt;
  &lt;tr&gt;    &lt;td width=&#34;105&#34;&gt;      &lt;p align=&#34;center&#34;&gt;        private      &lt;/p&gt;    &lt;/td&gt;
    &lt;td width=&#34;139&#34;&gt;      &lt;p align=&#34;center&#34;&gt;        √      &lt;/p&gt;    &lt;/td&gt;
    &lt;td width=&#34;87&#34;&gt;    &lt;/td&gt;
    &lt;td width=&#34;104&#34;&gt;    &lt;/td&gt;
    &lt;td width=&#34;149&#34;&gt;    &lt;/td&gt;  &lt;/tr&gt;
  &lt;tr&gt;    &lt;td width=&#34;105&#34;&gt;      &lt;p align=&#34;center&#34;&gt;        default      &lt;/p&gt;    &lt;/td&gt;
    &lt;td width=&#34;139&#34;&gt;      &lt;p align=&#34;center&#34;&gt;        √      &lt;/p&gt;    &lt;/td&gt;
    &lt;td width=&#34;87&#34;&gt;      &lt;p align=&#34;center&#34;&gt;        √      &lt;/p&gt;    &lt;/td&gt;
    &lt;td width=&#34;104&#34;&gt;    &lt;/td&gt;
    &lt;td width=&#34;149&#34;&gt;    &lt;/td&gt;  &lt;/tr&gt;
  &lt;tr&gt;    &lt;td width=&#34;105&#34;&gt;      &lt;p align=&#34;center&#34;&gt;        protected      &lt;/p&gt;    &lt;/td&gt;
    &lt;td width=&#34;139&#34;&gt;      &lt;p align=&#34;center&#34;&gt;        √      &lt;/p&gt;    &lt;/td&gt;
    &lt;td width=&#34;87&#34;&gt;      &lt;p align=&#34;center&#34;&gt;        √      &lt;/p&gt;    &lt;/td&gt;
    &lt;td width=&#34;104&#34;&gt;      &lt;p align=&#34;center&#34;&gt;        √      &lt;/p&gt;    &lt;/td&gt;
    &lt;td width=&#34;149&#34;&gt;    &lt;/td&gt;  &lt;/tr&gt;
  &lt;tr&gt;    &lt;td width=&#34;105&#34;&gt;      &lt;p align=&#34;center&#34;&gt;        public      &lt;/p&gt;    &lt;/td&gt;
    &lt;td width=&#34;139&#34;&gt;      &lt;p align=&#34;center&#34;&gt;        √      &lt;/p&gt;    &lt;/td&gt;
    &lt;td width=&#34;87&#34;&gt;      &lt;p align=&#34;center&#34;&gt;        √      &lt;/p&gt;    &lt;/td&gt;
    &lt;td width=&#34;104&#34;&gt;      &lt;p align=&#34;center&#34;&gt;        √      &lt;/p&gt;    &lt;/td&gt;
    &lt;td width=&#34;149&#34;&gt;      &lt;p align=&#34;center&#34;&gt;        √      &lt;/p&gt;    &lt;/td&gt;  &lt;/tr&gt;&lt;/table&gt;
类的修饰符只有public 和 default，默认时只能被同一个文件或包内访问。</description>
    </item>
    
    <item>
      <title>Java运算符优先级(表格)</title>
      <link>https://fatkun.github.io/2010/07/java-operator-priority.html</link>
      <pubDate>Wed, 28 Jul 2010 14:45:18 +0000</pubDate>
      
      <guid>https://fatkun.github.io/2010/07/java-operator-priority.html</guid>
      <description>Java运算符优先级参考图表 本文来源 http://blog.csdn.net/xiaoli_feng/archive/2009/09/18/4567184.aspx 优先级 运算符 结合性 1 () [] . 从左到右 2 ! +(正) -(负) ~ ++ &amp;#8212; 从右向左 3 * / % 从左向右 4 +(加) -(减)</description>
    </item>
    
    <item>
      <title>Java的重载(Overload)与重写(Override)</title>
      <link>https://fatkun.github.io/2010/07/java-overload-and-overrid.html</link>
      <pubDate>Wed, 28 Jul 2010 14:10:25 +0000</pubDate>
      
      <guid>https://fatkun.github.io/2010/07/java-overload-and-overrid.html</guid>
      <description>重载与重写之间的差别 区别点 重载方法 重写方法 参数列表 必须修改 一定不能修改 返回类型 可以修改 一定不能修改 异常 可以修改 可以减少或删除，一定不能抛出新</description>
    </item>
    
    <item>
      <title>Java数据类型转换</title>
      <link>https://fatkun.github.io/2010/07/data-type-conversion.html</link>
      <pubDate>Wed, 28 Jul 2010 13:39:04 +0000</pubDate>
      
      <guid>https://fatkun.github.io/2010/07/data-type-conversion.html</guid>
      <description>1.在Java中看到象“1.39e-47f”这样的表达式时，它真正的含义是“1.39×10 的-47次方”。 2.注意如果编译器能够正确地识别类</description>
    </item>
    
    <item>
      <title>Java的运算符号（逻辑与、或、非、移位运算）</title>
      <link>https://fatkun.github.io/2010/07/java-operator.html</link>
      <pubDate>Wed, 28 Jul 2010 03:45:53 +0000</pubDate>
      
      <guid>https://fatkun.github.io/2010/07/java-operator.html</guid>
      <description>1.只可将AND，OR 或NOT 应用于布尔值。与在C 及C++中不同，不可将一个非布尔值当作布尔值在逻辑表达式中使用。 2.在AND（&amp;amp;&amp;</description>
    </item>
    
    <item>
      <title>java变量的作用域</title>
      <link>https://fatkun.github.io/2010/07/the-scope-of-variables.html</link>
      <pubDate>Tue, 27 Jul 2010 06:37:38 +0000</pubDate>
      
      <guid>https://fatkun.github.io/2010/07/the-scope-of-variables.html</guid>
      <description>public class OneClass { static int x;//会赋值默认值0 public static void main(String[] args){ //int x = 2; //不能在同一个方法内定义同一个变量，不然会报错 Duplicate local variable x System.out.print</description>
    </item>
    
    <item>
      <title>Java的主要类型及它们的取值范围</title>
      <link>https://fatkun.github.io/2010/07/java-data-type.html</link>
      <pubDate>Mon, 26 Jul 2010 17:11:29 +0000</pubDate>
      
      <guid>https://fatkun.github.io/2010/07/java-data-type.html</guid>
      <description>Java的主要类型 主类型 默认值 大小（位） 最小值 最大值 封装器类型 boolean false 1 &amp;#8211; &amp;#8211; Boolean char &amp;#8216;\u0000&amp;#8242;(null) 16 Unicode 0 Unicode 2^16-1 Character byte (byte)0 8 -128 127 Byte short (short)0 16 -2^15 +2^15-1 Short int 32 -2^31 +2^31-1 Integer long 0L 64 -2^63 -2^63-1 Long float 0.0f</description>
    </item>
    
    <item>
      <title>重新学习Java基础</title>
      <link>https://fatkun.github.io/2010/07/learning-java.html</link>
      <pubDate>Mon, 26 Jul 2010 03:18:18 +0000</pubDate>
      
      <guid>https://fatkun.github.io/2010/07/learning-java.html</guid>
      <description>&lt;p&gt;想要重新学习Java基础，因为基础实在是太差了，很多概念都搞不清楚，而笔试题中大部分是基础题，加强基础还是很有必要的，苦于没有学习的条目，所以上网搜索到下面的文章，吓死我了，这位同学看了N本书，应该还写了N多的读书笔记~哎，学习没有捷径，唯有苦功夫。大概按照这来看着，看来我要买本《Thinking in Java》，看电子书不太舒服。
以下原文地址：&lt;a href=&#34;http://hi.baidu.com/guoerguoerguoer/blog/item/326f275117822568853524c0.html&#34;&gt;学习java的步骤和一些必看的书籍&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>